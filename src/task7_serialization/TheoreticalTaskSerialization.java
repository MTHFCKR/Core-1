package task7_serialization;

import java.io.Serializable;

/**
 * 1.Что такое "пользовательская сериализация" (custom serialization) в Java,
 * и как можно настроить процесс сериализации и десериализации с помощью пользовательских
 * методов writeObject() и readObject()?
 *
 * 2.Каким образом можно обойти сериализацию некоторых полей объекта (например, полей с паролями),
 * чтобы избежать сохранения их в сериализованном виде?
 *
 * 3. В каких случаях класс не сериализуется ?
 */
public class TheoreticalTaskSerialization {

    /**
     * Сериализуется ли класс ниже?
     */



    class Person implements Serializable {
        private String name;
        private int age;

        public Person(String name, int age) {
            this.name = name;
            this.age = age;
        }

        public String getName() {
            return name;
        }

        public int getAge() {
            return age;
        }
    }
























    /**
     * 1.
     Пользовательская сериализация (custom serialization) в Java позволяет разработчикам настраивать процесс
     сериализации и десериализации объектов с использованием методов writeObject() и readObject(). Эти методы вызываются
     при сериализации и десериализации объекта соответственно. Разработчик может определить собственную логику для сохранения
     и восстановления состояния объекта.

     2.Обход сериализации некоторых полей объекта можно осуществить с помощью ключевого слова transient. Если поле
     объявлено как transient, оно будет исключено из процесса сериализации и не сохранится в сериализованной форме объекта.

     3.
     Класс не будет сериализован в следующих случаях:
     Класс не реализует интерфейс Serializable:
     Поля класса не являются сериализуемыми
     Исключения при сериализации
     Использование ключевого слова transient
     Исключения в пользовательском коде: Если пользовательский код в методах writeObject() или readObject()
     выбрасывает исключения, это может привести к неудачной сериализации.


     */
}
