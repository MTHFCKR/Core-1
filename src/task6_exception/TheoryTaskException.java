package task6_exception;


import java.io.FileWriter;
import java.io.IOException;

/**
 *  1.Что такое "коррумпированные исключения" (corrupted exceptions), и какие меры предосторожности
 следует предпринимать при их обнаружении и обработке?

     2.Какие подходы и инструменты существуют для тестирования исключительных ситуаций и ошибок в Java-приложениях,
 включая использование библиотек для генерации исключений?

 */
public class TheoryTaskException {

    /**
     * Что выведет код?
     */
        public static void main(String[] args) {
            try {
                int[] arr = new int[5];
                System.out.println(arr[10]);
            } catch (ArrayIndexOutOfBoundsException e) {
                System.out.println("Индекс выходит за пределы массива");
            } catch (Exception e) {
                System.out.println("Произошла ошибка");
            }

    }


    /**
     *  Что выведет код?
     */

    public class FileExample {
        public static void main(String[] args) {
            FileWriter writer = null;
            try {
                writer = new FileWriter("example.txt");
                writer.write("Пример записи в файл");
            } catch (IOException e) {
                System.out.println("Ошибка при записи в файл");
            } finally {
                try {
                    if (writer != null) {
                        writer.close();
                    }
                } catch (IOException e) {
                    System.out.println("Ошибка при закрытии файла");
                }
            }
        }
    }


































    /**
     * 1.Коррумпированные исключения - это исключительные ситуации, при которых внутреннее состояние
     * исключения или стека вызовов может быть изменено или нарушено.
     * Для предотвращения коррупции исключений следует избегать модификации исключений
     * и стеков вызовов после их создания.
     *
     * 2.Для тестирования исключительных ситуаций и ошибок в Java-приложениях можно использовать библиотеки
     * для генерации исключений, такие как JUnit и TestNG.
     * Также полезны инструменты для генерации исключительных ситуаций вручную,
     * чтобы проверить, как приложение реагирует на различные сценарии ошибок.
     */


    /**
     * Задачи
     * 1.Код выведет "Индекс выходит за пределы массива". В блоке try происходит попытка доступа
     * к элементу массива по индексу 10, который находится за пределами размера массива. Это приводит к генерации
     * исключения ArrayIndexOutOfBoundsException, которое перехватывается в первом блоке catch
     *
     * 2.Код пытается создать и записать строку в файл "example.txt".
     * Если при записи возникает ошибка (например, из-за отсутствия прав доступа),
     * она перехватывается в блоке catch. Затем блок finally закрывает файл, даже если были ошибки.
     */

}
